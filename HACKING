Understanding (and hacking on) Bathtub DB
=========================================

Tub (or Bathtub DB, your pick) is a lot like Git, so if you understand how Git
works under the hood, you're a long way toward understanding Tub.  Basically
this is the aspect of Git you need to understand:

    https://git-scm.com/book/en/v2/Git-Internals-Git-Objects

To start hacking, read `src/chaos.rs` first.  That's the low-level object store,
in which everything in Tub is encapsulated.  Then look at `src/inception.rs`.
That's where large objects are encoded across multiple small objects, and where
compression happens.


Guidelines for making Tub all like kickass and shit, yo
=======================================================

    *   Never add unnecessary complexity or attack surface.

    *   If we find ourselves with unnecessary complexity (which will happen as
        we work through finalizing the Tub protocols), rip it the fuck out.

    *   Never leave performance on the table... the faster Tub is, the more
        widely it can be used, and the moo mooney we can make!

    *   Never store or transmit unnecessary data.

    *   Always use simple, compact binary encodings, the compactness exception
        being let's probably avoid any tricky bit packing; there are only
        trivial space  savings to be gained in the current protocol design by
        doing this, plus leaving all bits available in say, the object type
        byte, is just good for future expansion.  Keeping all the protocols
        byte-wise defined makes them simpler, friendlier, and less easy to fuck
        up.

    *   Null terminated anything can fuck off!  Always length prefix; never use
        null termination in any Tub data formats, wire formats, etc.

    *   Network-byte-order can fuck off!  All the computers people actually use
        (ie, ARM, ARM64, x86, x86-64, RISC-V) are little-endian, so it's fucking
        stupid to waste clycle(s) to swap byte order!  All Tub protocols and
        formats will be LITLE MOTHER FUCKING ENDIAN!  If the Internet were
        designed today (and people weren't being fucking stupid),
        "network-byte-order" would obviously be little-endian.

    *   The network-wire-format is the in-memory-format is the on-disk-format...
        there is no reason for more complexity than this.

    *   Zero copy is cool; do all like zero copy and shit whenever you can, yo

    *   Fixed length is cool; whenever possible use fixed length data stuctures,
        especially in performance hot spots, and also for simplicity, security,
        and general unfuckupability.

    *   SIMD is cool; when designing data structures and algorithms, aim to make
        them SIMD friendly (and then implement said SIMD paths to make sure
        they are friendly!)

    *   Think about cache efficiency in the protocol designs A LOT!  We should
        all have this tattooed our foreheads in reverse: I WILL NEVER FORGET THE
        ALL IMPORTANT 64 BYTE CACHE LINE SIZE, NOR FORGOT ITS PROFOUND
        PERFORMANCE IMPLICATIONS!  As the software engineers like to say, size
        (and alignment) really do matter!

    *   When in doubt, do constant time comparisons and encoding/decoding.
        Don't optimize for error cases!  Eg, by short cutting a Dbase32 decode
        at the first error, you not only leak potentially exploitable timing
        information, you also make exectution for the non-error case slower!
        Branches, yo!  Gah, fucking stupid!
        (FIXME: we aren't yet doing constant time compare on chaos::Name)
        (FIXME: let's help Rust be kickass and safe for constant time stuff.
        Jason thinks there should be contant_time{}, a bit like unsafe{},
        that indicates a contract with the compiler: the compliler, to the
        extent possible, should prevent you from doing non-contant-time stuff,
        plus also the compiler super pinky swears not to inject any unexpected
        non-constant-time shenanigans into the code generated from the block)

    *   When in doubt, follow Git's design (because it's a great design).  Git's
        packfile design, how it handles delta compression, its merge algorithms,
        etc... our starting point for most things like that should be to copy
        what Git does (with whatever needed Tubification).  A few planned
        deviations from Git (asside from those mentioned above):

        -   Hash function and hashing protocols need to be configurable and
            upgradeable; this is more or less done as stuff like Object<H, N>,
            and Store<H, N> are already generic on the hash function and digest
            size.  TODO: Add hash protocol info in a header at the start of an
            object stream.

        -   Compression algorithm needs to be configurable and upgradable; best
            way to make sure this happens is to immediately add two compression
            algorithms and get lots of iterations on that problem before the
            protocols are finalized

        -   Git's CLI is, hmmm... let's try to improve on that quite a lot.
            Jason thinks the Bazaar CLI is quite well done, worth looking at if
            you've never played with it.  But really we're going to de a clean
            slate design, considering all that's changed since Git was desgined.

        -   We're tackling the authetication problem head on; Tub's signed
            block-chain is the magic sauce here.


